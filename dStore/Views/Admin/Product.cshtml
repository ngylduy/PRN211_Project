@model PaginatedList<BusinessObject.Product>

@{
    ViewData["Title"] = "Product Management";
    Layout = "~/Views/Shared/_Admin.cshtml";
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-2 text-gray-800">@ViewData["Title"]</h1>
    <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm" asp-action="Create">+ Create New Product</a>
</div>

<!-- DataTales Example -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Product</h6>
    </div>
    <div class="card-body">

        @if (TempData["Create"] != null && !string.IsNullOrEmpty(TempData["Create"].ToString()))
        {
            await Html.RenderPartialAsync("Alert", new ViewDataDictionary(ViewData) { { "role", "success" }, { "message", TempData["Create"] } });
        }
        @if (TempData["Update"] != null && !string.IsNullOrEmpty(TempData["Update"].ToString()))
        {
            await Html.RenderPartialAsync("Alert", new ViewDataDictionary(ViewData) { { "role", "success" }, { "message", TempData["Update"] } });
        }
        @if (TempData["Delete"] != null && !string.IsNullOrEmpty(TempData["Delete"].ToString()))
        {
            await Html.RenderPartialAsync("Alert", new ViewDataDictionary(ViewData) { { "role", "success" }, { "message", TempData["Delete"] } });
        }

        @if (ViewBag.Error != null)
        {
            <div class="row mt-3">
                <div class="alert alert-danger" role="alert">@ViewBag.Error</div>
            </div>
        }
        else
        {
            <form asp-action="Product" asp-controller="Admin" method="get">
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="search" class="d-inline">Search by Product Name: </label>
                        </div>
                        <div class="col-md-8">
                            <div class="form-outline w-50">
                                <input name="search" type="search" id="form1" class="form-control" value="@ViewBag.Search" />
                                <label class="form-label" for="form1">Search by Product Name</label>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <label for="from" class="d-inline">Unit Price:</label>
                        </div>
                        <div class=" col-md-4 d-flex">
                            <div class="row">
                                <div class="col-md-11">
                                    <div class="form-outline">
                                        <input name="from" type="number" id="from" class="form-control" aria-describedby="unitPriceHelp" value="@ViewBag.Search" />
                                        <label class="form-label" for="form1">Unit Price: From ($)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-11">
                                    <div class="form-outline">
                                        <input name="to" type="number" id="to" class="form-control" aria-describedby="unitPriceHelp" value="@ViewBag.Search" />
                                        <label class="form-label" for="form1">Unit Price: To ($)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-11">
                                    <button type="submit" class="btn btn-primary" name="Search">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="offset-md-3">
                        <small id="unitPriceHelp" class="form-text text-muted">Leave the two inputs both blank if you don't want to filter by Unit Price</small>
                    </div>
                </div>
            </form>
            <div class="table-responsive">
                @if (Model == null || !Model.Any())
                {
                    <div class="text-danger">No results found!!</div>
                }
                else
                {
                    <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Weight</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Detail</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td><img height="90" src="@Html.DisplayFor(modelItem => item.Image)" alt="@Html.DisplayFor(modelItem => item.ProductName)" /></td>
                                    <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
                                    <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Category.CategoryName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Weight)</td>
                                    <td>@Math.Round(item.UnitPrice, 2)</td>
                                    <td>@Html.DisplayFor(modelItem => item.UnitsInStock)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Details)</td>
                                    <td>
                                        <a class="btn btn-info" asp-action="Edit" asp-route-id="@item.ProductId">Edit</a> @Html.Raw("&verbar;")
                                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div>
                        @{
                            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                        }
                        <a asp-action="Index" asp-route-page="@(Model.PageIndex - 1)" class="btn btn-outline-primary @prevDisabled">Previous</a>
                        <a asp-action="Index" asp-route-page="@(Model.PageIndex + 1)" class="btn btn-outline-primary @nextDisabled">Next</a>
                    </div>
                }
            </div>
        }
    </div>
</div>
